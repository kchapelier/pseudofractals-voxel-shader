// xs_begin
// src : 'https://github.com/kchapelier/pseudofractals-voxel-shader/'
// author : '@kchplr'
// arg : { id = '0' name = 'ScaleX' value = '1' range = '0.1 10' step = '0.001' decimal = '3' }
// arg : { id = '1' name = 'ScaleY' value = '1' range = '0.1 10' step = '0.001'	decimal = '3' }
// arg : { id = '2' name = 'ScaleZ' value = '1' range = '0.1 10' step = '0.001'	decimal = '3' }
// arg : { id = '3' name = 'DistOrder' value = '1' range = '0.5 2.5' step = '0.001' decimal = '3' }
// arg : { id = '4' name = 'Seed' value = '1' range = '0.1 10' step = '0.01' decimal = '3' }
// arg : { id = '5' name = 'Threshold' value = '0.5' range = '0.01 0.99' step = '0.01' decimal = '3' }
// arg : { id = '6' name = 'Clean' value = '1' range = '0 1' step = '1' decimal = '0' }
// xs_end

float process (vec3 p, float minkowskiDistanceOrder, float pseudoFractalModulo, float threshold, vec3 scale) {
	//coordinate scaling
	p *= scale;

	// squared minkowski distance
	p = pow(abs(p), vec3(minkowskiDistanceOrder));
	float d = pow(p.x + p.y + p.z, 2. / minkowskiDistanceOrder);
	
	// pseudofractal
	float s = clamp(mod(d, pseudoFractalModulo) / pseudoFractalModulo, 0., 1.);

	// thresholding
	return threshold == 0. || s > threshold ? 1. : 0.;
}

float map(vec3 v) {
	vec3 scale = vec3(abs(iArgs[0]), abs(iArgs[1]), abs(iArgs[2]));
	float minkowskiDistanceOrder = max(iArgs[3], 0.); // 2. is euclidean distance
	float pseudoFractalModulo = iArgs[4];
	float threshold = clamp(iArgs[5], 0., 1.);
	float cleaning = iArgs[6];

	if (length(scale) == 0.) {
		scale = vec3(1.);
	}

	// coordinate from the center of the volume
	vec3 p = v - iVolumeSize * 0.5 + 0.5;

	float c = process(p, minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);

	if (c > 0. && cleaning > 0.) {
		float u = process(p + vec3(0., 0., 1.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);
		float d = process(p + vec3(0., 0., -1.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);
		float l = process(p + vec3(1., 0., 0.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);
		float r = process(p + vec3(-1., 0., 0.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);
		float f = process(p + vec3(0., 1., 0.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);
		float b = process(p + vec3(0., -1., 0.), minkowskiDistanceOrder, pseudoFractalModulo, threshold, scale);

		c = (u + d + l + r + f + b) > 0. ? 1. : 0.;
	}

	return c;
}
